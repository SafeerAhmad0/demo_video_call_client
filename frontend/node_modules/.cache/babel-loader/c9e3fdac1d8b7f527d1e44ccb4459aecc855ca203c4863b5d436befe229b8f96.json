{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samee\\\\OneDrive\\\\Desktop\\\\Testing_Video_App\\\\verifycall-app_v4_210825\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI, setAuthToken, setUser, getAuthToken, getUser } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUserState] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in on app start\n    const initializeAuth = async () => {\n      try {\n        const token = getAuthToken();\n        const savedUser = getUser();\n        if (token && savedUser) {\n          setUserState(savedUser);\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        // Clear invalid tokens\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('user');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      const response = await authAPI.login(email, password);\n\n      // Store token and user data\n      setAuthToken(response.access_token);\n      setUser(response.user);\n      setUserState(response.user);\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async (email, password) => {\n    try {\n      setIsLoading(true);\n      const response = await authAPI.register(email, password);\n\n      // Store token and user data\n      setAuthToken(response.access_token);\n      setUser(response.user);\n      setUserState(response.user);\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setIsLoading(true);\n      await authAPI.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local state regardless of API call success\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('user');\n      setUserState(null);\n      setIsLoading(false);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"bTpgeaJTx3KyVJa6ErLVo2Zc6nQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","setAuthToken","setUser","getAuthToken","getUser","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUserState","isLoading","setIsLoading","initializeAuth","token","savedUser","error","console","localStorage","removeItem","login","email","password","response","access_token","register","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/samee/OneDrive/Desktop/Testing_Video_App/verifycall-app_v4_210825/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, authAPI, setAuthToken, setUser, getAuthToken, getUser } from '../services/api';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (email: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUserState] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in on app start\r\n    const initializeAuth = async () => {\r\n      try {\r\n        const token = getAuthToken();\r\n        const savedUser = getUser();\r\n        \r\n        if (token && savedUser) {\r\n          setUserState(savedUser);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing auth:', error);\r\n        // Clear invalid tokens\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('user');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string): Promise<void> => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await authAPI.login(email, password);\r\n      \r\n      // Store token and user data\r\n      setAuthToken(response.access_token);\r\n      setUser(response.user);\r\n      setUserState(response.user);\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (email: string, password: string): Promise<void> => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await authAPI.register(email, password);\r\n      \r\n      // Store token and user data\r\n      setAuthToken(response.access_token);\r\n      setUser(response.user);\r\n      setUserState(response.user);\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async (): Promise<void> => {\r\n    try {\r\n      setIsLoading(true);\r\n      await authAPI.logout();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      // Clear local state regardless of API call success\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('user');\r\n      setUserState(null);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    isLoading,\r\n    login,\r\n    register,\r\n    logout,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}